name: CI to Docker Hub

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      -
        name: Checkout 
        uses: actions/checkout@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          # file: ./Dockerfile
          platforms: node:16-alpine, nginx:1.23.1-alpine
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/ttd-docker:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ttd-docker:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/ttd-docker:buildcache,mode=max










#=================================================================================================================
    # strategy:
    #   matrix:
    #     node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # steps:
    # - uses: actions/checkout@v3
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: ${{ matrix.node-version }}
    #     cache: 'npm'
    # - run: npm i
    # - run: CI=false npm run build
    # - name: Install SSH Key
    #   uses: shimataro/ssh-key-action@v2
    #   with:
    #       key: ${{ secrets.EC2_SSH_KEY }} 
    #       known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
    # - name: Adding Known Hosts
    #   run: ssh-keyscan -H ${{ secrets.EC2_HOST_IP}} >> ~/.ssh/known_hosts
    # - name: Deploy with rsync
    #   run: rsync -avz ./build ${{ secrets.USERNAME }}@${{ secrets.EC2_HOST_IP }}:/usr/share/nginx/html/docker
    # - run: |
    #     sudo service nginx restart
 
